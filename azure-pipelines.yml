trigger:
- main
- feature/*

variables:
  project: 'nkavid'
  repository: 'reqt'
  tag: '0.0.3'

pool:
  vmImage: ubuntu-latest

steps:
  - checkout: self
    lfs: false
    submodules: true
    persistCredentials: true

  - task: Cache@2
    displayName: "Docker: Image cache task"
    inputs:
      key: 'docker | "$(Agent.OS)" | "$(tag)" | cache'
      path: $(Pipeline.Workspace)/docker_cache
      cacheHitVar: IMAGE_CACHE_RESTORED

  - task: Cache@2
    displayName: "Build: Cmake build cache task"
    inputs:
      key: 'cmake | "$(Agent.OS)" | "0.0.4" | cache'
      path: $(Pipeline.Workspace)/s/build
      cacheHitVar: BUILD_CACHE_RESTORED

  - download: current
    displayName: 'Download: Build'
    artifact: MainBuild
    condition: and(not(canceled()), not(failed()), ne(variables.BUILD_CACHE_RESTORED, 'true'))

  - script: |
      docker load -i $(Pipeline.Workspace)/docker_cache/cache.tar
    displayName: 'Docker: Load image'
    condition: and(not(canceled()), not(failed()), eq(variables.IMAGE_CACHE_RESTORED, 'true'))

  - script: |
      ./docker.sh image
    displayName: 'Docker: Build image'
    condition: and(not(canceled()), not(failed()), ne(variables.IMAGE_CACHE_RESTORED, 'true'))

  - script: |
      mkdir -p $(Pipeline.Workspace)/docker_cache
      docker save -o $(Pipeline.Workspace)/docker_cache/cache.tar $(project)/$(repository):$(tag)
    displayName: 'Docker: Save image'
    condition: and(not(canceled()), not(failed()), ne(variables.IMAGE_CACHE_RESTORED, 'true'))

  - script: |
      ./docker.sh cpp
    displayName: 'Build: C++ build'
    condition: and(not(canceled()), not(failed()))

  - script: |
      ./docker.sh python
    displayName: 'Build: Python build'
    condition: and(not(canceled()), not(failed()))

  - script: |
      ./docker.sh check
    displayName: 'Check: Run linters and autoformatters'
    condition: and(not(canceled()), not(failed()))

  - publish: $(System.DefaultWorkingDirectory)/build
    displayName: 'Publish: Build'
    artifact: MainBuild
    condition: and(not(canceled()), not(failed()), eq(variables.Build.SourceBranchName, 'main'))

